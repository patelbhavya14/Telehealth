/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telehealth;

import com.telehealth.Business.DB4OUtil.DB4OUtil;
import com.telehealth.Business.EcoSystem;
import com.telehealth.Business.Enterprise.Enterprise;
import com.telehealth.Business.Organization.Organization;
import com.telehealth.Business.Patient.Patient;
import com.telehealth.Business.Patient.PatientDiagnosis;
import com.telehealth.Business.Patient.PatientInsurance;
import com.telehealth.Business.UserAccount.UserAccount;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RASHMI
 */
public class InsurancePanel extends javax.swing.JPanel {

    /**
     * Creates new form InsurancePanel
     */
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    String pattern = "MM/dd/yyyy";
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    int table_selected_row;
    UserAccount userAccount;
    PatientDiagnosis patientDiagnosis;
    Patient currentPatient;
    PatientInsurance currentInsurance;
    Enterprise currentEnterprise;
    Organization currentOrganization;

    public InsurancePanel(TeleHealthView teleHealthView, EcoSystem system, Enterprise currentEnterprise, Organization currentOrganization, UserAccount userAccount) {
        initComponents();
        this.system = system;
        this.userAccount = userAccount;
        this.currentEnterprise = currentEnterprise;
        this.currentOrganization = currentOrganization;
        btnDelete.setVisible(false);
        populatePatientComboBox();
        populateTable();
        clearFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtInsurancePlan = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPolicyNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPolicyCoverage = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtpolicyStartDate = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtpolicyEndDate = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbPatient = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInsurance = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(telehealth.TeleHealthApp.class).getContext().getResourceMap(InsurancePanel.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        txtAmount.setFont(resourceMap.getFont("txtAmount.font")); // NOI18N
        txtAmount.setName("txtAmount"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        txtInsurancePlan.setFont(resourceMap.getFont("txtInsurancePlan.font")); // NOI18N
        txtInsurancePlan.setName("txtInsurancePlan"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        txtPolicyNumber.setFont(resourceMap.getFont("txtPolicyNumber.font")); // NOI18N
        txtPolicyNumber.setName("txtPolicyNumber"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        txtPolicyCoverage.setFont(resourceMap.getFont("txtPolicyCoverage.font")); // NOI18N
        txtPolicyCoverage.setName("txtPolicyCoverage"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        try {
            txtpolicyStartDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtpolicyStartDate.setFont(resourceMap.getFont("txtpolicyStartDate.font")); // NOI18N
        txtpolicyStartDate.setName("txtpolicyStartDate"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        try {
            txtpolicyEndDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtpolicyEndDate.setFont(resourceMap.getFont("txtpolicyEndDate.font")); // NOI18N
        txtpolicyEndDate.setName("txtpolicyEndDate"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        cmbPatient.setMinimumSize(new java.awt.Dimension(28, 22));
        cmbPatient.setName("cmbPatient"); // NOI18N

        btnAdd.setFont(resourceMap.getFont("btnAdd.font")); // NOI18N
        btnAdd.setIcon(resourceMap.getIcon("btnAdd.icon")); // NOI18N
        btnAdd.setText(resourceMap.getString("btnAdd.text")); // NOI18N
        btnAdd.setName("btnAdd"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setFont(resourceMap.getFont("btnDelete.font")); // NOI18N
        btnDelete.setIcon(resourceMap.getIcon("btnDelete.icon")); // NOI18N
        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblInsurance.setFont(resourceMap.getFont("tblInsurance.font")); // NOI18N
        tblInsurance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Policy Number", "Plan", "Coverage", "Amount", "Start Date", "End Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInsurance.setName("tblInsurance"); // NOI18N
        tblInsurance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInsuranceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInsurance);
        if (tblInsurance.getColumnModel().getColumnCount() > 0) {
            tblInsurance.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title6")); // NOI18N
            tblInsurance.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title0")); // NOI18N
            tblInsurance.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title1")); // NOI18N
            tblInsurance.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title2")); // NOI18N
            tblInsurance.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title3")); // NOI18N
            tblInsurance.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title4")); // NOI18N
            tblInsurance.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("tblInsurance.columnModel.title5")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtInsurancePlan, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPolicyNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(125, 125, 125)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(36, 36, 36)
                                        .addComponent(txtPolicyCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtpolicyStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtpolicyEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(cmbPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(173, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtPolicyCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtInsurancePlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtpolicyStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPolicyNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtpolicyEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbPatient, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblInsuranceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInsuranceMouseClicked
        // TODO add your handling code here:
        try {

            if (evt.getClickCount() == 2) {
                table_selected_row = tblInsurance.getSelectedRow();
                currentPatient = (Patient) tblInsurance.getValueAt(table_selected_row, 0);
                currentInsurance = (PatientInsurance) tblInsurance.getValueAt(table_selected_row, 2);

                cmbPatient.setSelectedItem(currentPatient);
                txtAmount.setText(String.valueOf(currentInsurance.getPolicyAmount()));
                txtInsurancePlan.setText(currentInsurance.getInsurancePlan());
                txtPolicyNumber.setText(currentInsurance.getPolicyNumber());
                txtPolicyCoverage.setText(currentInsurance.getPolicyCoverage());
                txtpolicyStartDate.setText(simpleDateFormat.format(currentInsurance.getPolicyStartDate()));
                txtpolicyEndDate.setText(simpleDateFormat.format(currentInsurance.getPolicyEndDate()));

                btnAdd.setText("Update");
                btnDelete.setVisible(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tblInsuranceMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        Patient patient = (Patient) cmbPatient.getSelectedItem();

        if (btnAdd.getText().equals("Add")) {
            if (validateFields()) {
                try {
                    PatientInsurance insurance = new PatientInsurance(
                            txtInsurancePlan.getText(),
                            txtPolicyNumber.getText(),
                            txtPolicyCoverage.getText(),
                            Double.parseDouble(txtAmount.getText()),
                            simpleDateFormat.parse(txtpolicyStartDate.getText()),
                            simpleDateFormat.parse(txtpolicyStartDate.getText()),
                            userAccount);

                    PatientInsurance patientInsurance = patient.createAndAddPatientInsurance(insurance);
                    try {
                        dB4OUtil.storeSystem(system);
                        clearFields();
                        populateTable();
                        JOptionPane.showMessageDialog(null, "Insurance added successfully");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } catch (Exception e) {

                }
            }
        } else {
            if (validateFields()) {
                try {
                    currentInsurance.setInsurancePlan(txtInsurancePlan.getText());
                    currentInsurance.setPolicyNumber(txtPolicyNumber.getText());
                    currentInsurance.setPolicyCoverage(txtPolicyCoverage.getText());
                    currentInsurance.setPolicyAmount(Double.parseDouble(txtAmount.getText()));
                    currentInsurance.setPolicyStartDate(simpleDateFormat.parse(txtpolicyStartDate.getText()));
                    currentInsurance.setPolicyEndDate(simpleDateFormat.parse(txtpolicyEndDate.getText()));

                    try {
                        dB4OUtil.storeSystem(system);
                        clearFields();
                        populateTable();
                        btnAdd.setText("Add");
                        btnDelete.setVisible(false);
                        JOptionPane.showMessageDialog(null, "Insurance updated successfully");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } catch (Exception e) {

                }

            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int selectedOption = JOptionPane.showConfirmDialog(null, "Delete Insurance", "Are you sure you want to delete this Insurance?", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.OK_OPTION) {
            currentPatient.getPatientInsuranceList().remove(currentInsurance);

            dB4OUtil.storeSystem(system);
            JOptionPane.showMessageDialog(null, "Insurance deleted successfully");
            clearFields();
            populateTable();
            btnAdd.setText("Add");
            btnDelete.setVisible(false);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox cmbPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInsurance;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtInsurancePlan;
    private javax.swing.JTextField txtPolicyCoverage;
    private javax.swing.JTextField txtPolicyNumber;
    private javax.swing.JFormattedTextField txtpolicyEndDate;
    private javax.swing.JFormattedTextField txtpolicyStartDate;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblInsurance.getModel();
        model.setRowCount(0);

        for (Patient patient : system.getPatientDirectory().getPatientList()) {
            for (PatientInsurance insurance : patient.getPatientInsuranceList()) {
                if (insurance.getInsuranceCompany() == userAccount) {
                    Object[] row = new Object[7];
                    row[0] = patient;
                    row[1] = insurance.getPolicyNumber();
                    row[2] = insurance;
                    row[3] = insurance.getPolicyCoverage();
                    row[4] = insurance.getPolicyAmount();
                    row[5] = insurance.getPolicyStartDate();
                    row[6] = insurance.getPolicyEndDate();
                    model.addRow(row);
                }

            }
        }
    }

    private boolean validateFields() {
        if (txtAmount.getText().trim().equals("") || txtInsurancePlan.getText().trim().equals("")
                || txtPolicyNumber.getText().trim().equals("") || txtPolicyCoverage.getText().trim().equals("")
                || txtpolicyStartDate.getText().trim().equals("") || txtpolicyEndDate.getText().trim().equals("")
                || cmbPatient.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "All fields are mandatory", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        Double amount;
        try {
            amount = Double.parseDouble(txtAmount.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter proper amount", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        simpleDateFormat.setLenient(false);
        Date startDate;
        Date endDate;
        try {
            startDate = simpleDateFormat.parse(txtpolicyStartDate.getText());
            endDate = simpleDateFormat.parse(txtpolicyEndDate.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Please enter proper date", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (endDate.before(startDate)) {
            JOptionPane.showMessageDialog(null, "End policy can not come before start date", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    public void clearFields() {
        cmbPatient.setSelectedItem(null);
        txtAmount.setText("");
        txtInsurancePlan.setText("");
        txtPolicyNumber.setText("");
        txtPolicyCoverage.setText("");
        txtpolicyStartDate.setText("");
        txtpolicyEndDate.setText("");
    }

    private void populatePatientComboBox() {
        cmbPatient.removeAllItems();

        for (Patient patient : system.getPatientDirectory().getPatientList()) {
            cmbPatient.addItem(patient);
        }
    }
}
